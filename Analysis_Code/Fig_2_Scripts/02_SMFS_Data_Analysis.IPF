//#include <XY Pair To Waveform>#include <strings as lists>//////////////////////////////////////////////////////////////////////////////////////////////// by LinGE on 18-November-2009// Import + bing to zero + Draw WLC + Count Curves + Remove WLC + Draw Zeroline // for VDAC//////////////////////////////////////////////////////////////////////////////////////////////#pragma rtGlobals=3		// Use modern global access method.Menu "Macros"	"Import_JPK"	"Gather"	"Draw_WLC"	"Mline"	"ToolBox_Rem_WLC"		"GET_OFFSET"	"DensPLot"	"modifer"	"renameCurvesOnGraph"	"ToolBox_SmoothAll"	"ToolBox_CountCurve"	"remove_traces_on_marquee"endmacro Draw_WLC()	drawer()endmacro DensPLot()	prepare_for_map2()	make_map2()endMacro Import_JPK()//variable declaration   Variable/G gVon, gBis, gdp, gsc, increment, phaseoffset, ampoffset, gperc, slope, defloffset, n, ampoffset, df, rt, dc, a, ppamp, box, scansize, redgdp, k, tog, m, l, gnewwindow   Variable  i, j, b, c, q, k datapoints   String/G path, fileName, str, gName, gNameDeflRnm, gNameDeflR, gNameZR, gNameZX, gNameDeflX, gNameDeflXnm, gNameTSS, gNamePnse, gNamePhase, gNameDefl, gNameZ, gNameDiff, gFileName2, gNameElas, gNameRelax, gNameDamp, gPath="", gFilename="", gFilename2="",   String FileType = "TEXT", Creator = "dosa", nb  //disables display of macro commands in the command line   Silent 1//get path of files   NewPath/O/Q FolderAdress   PathInfo FolderAdress   gPath = S_Path//get filename, no of datapoints etc.GetNameVB_JPK()//either make new graph-window (newwindow=1) or else use deflection window (make it if it doesnt exist already)   if (gnewwindow==1)       //make new graph-window       display   else       //openg deflection window if exists       dowindow/f Deflection       if(v_flag==0)           display as "Deflection"                 dowindow/c Deflection             endif   endif   //starting point is gvon       increment=gVon   //files imported will be count       n=0   //start to loop from start to stop       do           //kill auxiliary waves           killwaves/z tss, temptss, tempdefl_nm, tempforce1, tempwave0, tempwave1, tempwave2, tempwave3, tempamp, tempphase, tempz, tempelas, tempdamp, temprelax, zpz                 gFileName=gName+"."+num2str(increment)+".txt"                //check if file is there           opennotebook /z /r /p=FolderAdress gFileName           //monitor number of file open attempts for notebook killing...           j=0                //...and if the file is there...           if (v_flag ==0)               //...kill the notebook that was used to check if its there               nb="notebook"+num2str(j)               dowindow/k $nb               j=j+1               //count files imported               n=n+1               //...load file (columnN goes to tempwaveN)               print gFileName               LoadWave  /Q /G /L={0,246,0,0,0}/N=tempwave /p=FolderAdress gFileName                             // note on loadwave command: /J is delimited, /G is general                     //create dynamic wavename for all channels               gNameDeflX=gName+num2str(increment)+"DeflX"               gNameDeflR=gName+num2str(increment)+"DeflR"               gNameDeflXnm=gName+num2str(increment)+"DeflXnm"               gNameDeflRnm=gName+num2str(increment)+"DeflRnm"               gNameZX=gName+num2str(increment)+"ZXnm"               gNameZR=gName+num2str(increment)+"ZRnm"               gNameTSS=gName+num2str(increment)+"TSS"                    //remove for FOR HDE TESTs                           tempwave0*=1e9               Wavestats/q tempwave0            //   Smooth/B 2, tempwave0               //calculate tip-sample separation               make/n=(V_npnts) temptss //              tempwave1*=gsc*54.8*1e-12 // if recorded unit is in V, use this line. otherwise block it !! //              tempwave1/=1.45                              tempwave1*=-1               tempwave1*=1e12    //                               tempwave1*=32.27*27.1*1e-12                     // if the data was in Volt                      duplicate tempwave1 tempdefl_nm               tempdefl_nm/=gsc               temptss = tempwave0 - tempdefl_nm              reverse tempwave1              reverse temptss               duplicate/o tempwave1 $gNameDeflR               duplicate/o temptss $gNameTSS                             //appending               $gNameDeflR = $gNameDeflR               $gNameTSS= $gNameTSS                                                 appendtograph /w=Deflection $gNameDeflR vs $gNameTSS               dowindow /f Deflection               ModifyGraph rgb($gNameDefl)=(0,39168,0)                        //show parameters of each file               	setscale x,0,numpnts($gNameDeflR),$gNameDeflR               	setscale x,0,numpnts($gNameTSS),$gNameTSS               //print "Wavename:",gfilename,";Turnpoint:",a,";Free peak-to-peak amplitude:",ppamp,";Boxsize:",box,";Scansize:",scansize,";Phase y-offset:",phaseoffset,";Slope:",slope           endif                   increment = increment + 1   while (increment<=gBis)print "Number of files imported:",nbeepEndmacro GetNameVB_JPK(Name,Von,Bis,sc, newwindow)   String/g gName   string Name="a"   variable Von=gVon   variable Bis=gBis   variable sc=gsc   variable newwindow=gnewwindow   prompt     Name,"Filename"   prompt     Von,"Start"   prompt     Bis,"Stop"   prompt     sc,"Spring constant, pN/nm"   prompt newwindow, "Make new window (1=yes, else in Defl)"   gName=Name   gVon=Von   gBis=Bis   gsc=sc   gnewwindow=newwindowEndMacro Mline()	modifyGraph grid=1,minor=1,gridRGB=(43690,43690,43690)		make/o line=0, xline	xline=2*x	appendtograph line vs xline	modify lsize(line)=2	modifygraph rgb(line)=(1,16019,65535)	endMacro ToolBox_CountCurve()	counter()endMacro ToolBox_Rem_WLC()	remove_WLC()endMacro Gather()String tracename1, xtracename1, tracename3, tracename4, tracename5, list1, list2, list3, name, list4, list5, traces, subs, helpVariable index=0, k=0, v1=0, xoff=0, yoff=0, letters=0, nrofwaves = 0, l=0, lengthtn, jvariable/g changecoloursilent 1//read out all wavenames of all graphs//Deflection will be the lead has to be the actual window when this macro is run!!!list1 = Tracenamelist("",";",1)//calculate number of wavesletters = strlen(list1)do   help = list1[l]   if(cmpstr(help, ";") ==0)       nrofwaves = nrofwaves+1   endif   l = l+1while (l<=letters)print "number of waves=", nrofwavesdo   //get wavenames out of lists to strings   traceName1 = StringFromList(index, list1)        //remove ' at the beginning and the end of some wavenames       if(strsearch(traceName1,"'",0)>=0)           lengthtn = strlen(traceName1)           j = 0           name =""           do               name[j] = traceName1[j+1]               j = j + 1           while(j < lengthtn-1)       else               name = tracename1       endif  tracename1 = ""+name   xtracename1 = xwavename("",tracename1)   //print "I am working on:", tracename1, "and", xtracename1   correct_offset_one($tracename1,$xtracename1)   //print index   index = index + 1   if (changecolour==1)      	ModifyGraph mode($tracename1)=2   	ModifyGraph rgb($tracename1)=(26112,26112,26112)   endifwhile (index<nrofwaves) Mline()End////This function uses line fits through the free lever part to correct the Y-offset and through half the contact part to correct X-offsets    (intersection of the two fits)                       Function correct_offset_one(activewave,activewave_x)//function correct_offset_one(activewave,activewave_x)//wave activewave,activewave_x//variable start_of_free_lever, xoffset, mid_of_contact_area,  perc_correct_l, minimum, maximum, mid//variable v_fiterror=0//variable v_fitoption=4//variable/g changecolour=0//////print "Is this the same name as one line above?", nameofwave(activewave)//  //ENTER YOUR VALUES HERE     //   perc_correct_l =30  //How long (in %) is the free cantilever part at the end of the force curve//      //Create access to global variables and waves//  wavestats/q/r=[(numpnts(activewave)*(1-(perc_correct_l/100))),(numpnts(activewave))] activewave// doupdate//  variable tail=0//  tail=0//  if ((V_max-V_min)>=50)// 	tail=1//  endif////////Correct offset and slope in y-direction//   start_of_free_lever = numpnts(activewave)-round(numpnts(activewave)*(perc_correct_l)/100)                                   //Find the datapoint at which the free cantilever part starts//    wavestats/q/r=[start_of_free_lever,numpnts(activewave)] activewave//   CurveFit/q/n line activewave[start_of_free_lever,numpnts(activewave)] /X=activewave_x                        //Get the slope of the free cantilever part//    wave W_coef//    wave fitcoef=W_coef//     killwaves/z temp_ywave;//    duplicate activewave temp_ywave; //    temp_ywave  = fitcoef[0] + fitcoef[1]*activewave_x    //Make a correction wave with the slope of the free cantilever part////    if (tail==1)//    	temp_ywave =v_avg//    endif//    //    activewave -= temp_ywave                                                                               //Substract the correction wave////////Correct offset in x-direction by finding the "contact point of the undeflected lever"//   maximum=activewave[numpnts(activewave)]//   minimum=activewave[0]//   mid=0.5*(maximum+minimum)//   FindLevel/Q/P/R=[0] activewave, (0.5*(activewave[numpnts(activewave)])); mid_of_contact_area = floor(V_LevelX)        //Find the contact part of the curve//   wavestats/q/r=[activewave[numpnts(activewave)], mid_of_contact_area] activewave                                           //Use the smallest point in the contact part to start the fit//   CurveFit/q/n line activewave[0,mid_of_contact_area] /X=activewave_x                    //Fit the contact part//   findlevel/P/q/R=[(numpnts(activewave_x)),1] activewave_x, (-1*fitcoef[0]/fitcoef[1])            //Find the contact point using the intersection of the baseline fit and the contact part fit;//                                                                                                  //Since we already subtracted the baseline fit, the baseline has zero slope and zero intersection! (makes math easier!)//   xoffset = (-1*fitcoef[0]/fitcoef[1])                            //The x-offset is the value at the contact point (in the X-wave)      //print xoffset////     if (tail==0)//        activewave_x  -= xoffset                                //Substract the x-offset////    endif////    //    wavestats/q activewave//    variable rupture=V_maxloc//    wavestats/q/r=[(0.2*(numpnts(activewave))),(0.5*(numpnts(activewave)))] activewave//    variable highpeak=V_max//    wavestats/q/r=[(0.15*(numpnts(activewave))),(0.21*(numpnts(activewave)))] activewave//    variable hp23=V_max    //    wavestats/q/r=[(0.21*(numpnts(activewave))),(0.27*(numpnts(activewave)))] activewave//     variable hp34=V_max   //    wavestats/q/r=[(0.27*(numpnts(activewave))),(0.33*(numpnts(activewave)))] activewave    //    variable hp45=V_max//    wavestats/q/r=[(0.33*(numpnts(activewave))),(0.39*(numpnts(activewave)))] activewave//    variable hp56=V_max//    variable peakx=activewave_x(rupture)-activewave_x////    if ((peakx<200)||(highpeak>500)||(hp23<80)||(hp34<80)||(hp45<80))////    if ((rupture<(0.5*(numpnts(activewave))))||(highpeak>500))//	activewave += 200//	activewave_x -= 30//   	string activ=NameOfWave(activewave)//	changecolour=1////    endif //   //End //function counter()//	string names=TraceNameList("",";",1)//	variable i,j=0//	for (i=0;i<=strlen(names);i+=1)//		if(stringmatch(";",names[i])==1)//			j+=1//		endif//	endfor//	print "\rThere are",j,"Curves in the current graph."//endfunction counter()String tracename1, tracename2, tracename3, tracename4, tracename5, list1, list2, list3, list4, list5, traces, subs, help, nameVariable index=0, k=0, v1=0, xoff=0, yoff=0, letters=0, l=0, j, lengthtn,num_good=0variable/g nrofwaves=0silent 1//read out all wavenames of all graphs//Deflection will be the lead has to be the actual window when this macro is run!!!list1 = Tracenamelist("",";",1)//calculate number of wavesletters = strlen(list1)do	help = list1[l]	if(cmpstr(help, ";") ==0)		nrofwaves = nrofwaves+1	endif	l = l+1while (l<=letters)do	//get wavenames out of lists to strings	traceName1 = StringFromList(index, list1)//	print "1. tracename1:", tracename1	//remove ' at the beginning and the end of some wavenames	if(strsearch(traceName1,"'",0)>=0)		lengthtn = strlen(traceName1)		j = 0		name =""		do			name[j] = traceName1[j+1]			j = j + 1		while(j < lengthtn-2)	else			name = tracename1	endif	getwaveoffset($name)	Variable/g gxoff = gxoff	Variable/g gyoff =gyoff	if (gyoff <0)		num_good+=1	endif//	print "2. name:",name	wavestats/q $name//	print "name:",name,V_npnts	index = index +1while (index<nrofwaves)print "\rThere are", nrofwaves,"Curves in the current graph."print num_good,"of them have been aliend to zero."EndFunction/c getwaveoffset(w)	//wave w = $name	//dowindow/f Deflection	wave w	String s	s= TraceInfo("",NameOfWave (w),0)		if( strlen(s) == 0 )		return NaN	endif		String subs= "offset(x)={"	Variable v1= StrSearch(s,subs,0)	if( v1 == -1 )		return NaN	endif	v1 += strlen(subs)			Variable xoff= str2num(s[v1,1e6])	v1= StrSearch(s,",",v1)	Variable yoff= str2num(s[v1+1,1e6])	//print "got offsets of",NameofWave(w),":",xoff,yoff	Variable/g gxoff = xoff	Variable/g gyoff = yoff	return cmplx(gxoff,gyoff)endMacro ToolBox_SmoothAll()String tracename1, tracename2, tracename3, tracename4, tracename5, list1, list2, list3, list4, list5, traces, subs, help,name,xnameVariable index=0, k=0, v1=0, xoff=0, yoff=0, letters=0, nrofwaves = 0, l=0,j,lengthtnsilent 1//read out all wavenames of all graphs//Deflection will be the lead has to be the actual window when this macro is run!!!list1 = Tracenamelist("",";",1)	variable smoothnum=1//	prompt smoothnum,"how many times?"//	doprompt "Smooth prameter, from 1-20",smoothnum//calculate number of wavesletters = strlen(list1)do	help = list1[l]	if(cmpstr(help, ";") ==0)		nrofwaves = nrofwaves+1	endif	l = l+1while (l<=letters)print "number of waves=", nrofwavesdo	//get wavenames out of lists to strings	traceName1 = StringFromList(index, list1)		//remove ' at the beginning and the end of some wavenames	if(strsearch(traceName1,"'",0)>=0)		lengthtn = strlen(traceName1)		j = 0		name =""		do			name[j] = traceName1[j+1]			j = j + 1		while(j < lengthtn-2)	else		name = tracename1	endif		print "smoothing:",name	xname=XWaveName("", name)	Smooth smoothnum, $name     //Smooth 1, '2807033ZRnm'	Smooth smoothnum, $xname	index = index + 1while (index<nrofwaves)Endfunction drawer()//This one Draw WLCs	make/o/n=115 wlcx,wlcy	variable i,k,j=0,jred=0,mark,lunkuochangdu,lunkuochangdunm	string mubiao="45,63,80,150,171,237,269",tar,tarred,mubiaored="304"	make/o target,targetred	prompt mubiao,"most likely WLCs"	prompt mubiaored,"less likely WLCs"	doprompt "WLC location sperated by coma(AAs): 132,164,183,202",mubiao,mubiaored	mubiao+=","	for (i=0;i<=strlen(mubiao);i+=1)		if (cmpstr(mubiao[i], ",") ==0)			tar=stringfromlist(j,mubiao,",")			target[j]=str2num(tar)			j+=1		endif	endfor	deletepoints j,(128-j),target	mubiaored+=","	for (i=0;i<=strlen(mubiaored);i+=1)		if (cmpstr(mubiaored[i], ",") ==0)			tarred=stringfromlist(jred,mubiaored,",")			targetred[jred]=str2num(tarred)			jred+=1		endif	endfor	deletepoints jred,(128-jred),targetred	print target,targetred	for (k=0;k<j;k+=1)			lunkuochangdunm=target[k]		lunkuochangdu=target[k]*0.36		for (i=0;i<=114;i+=1)			wlcx[i]=(i/128)*lunkuochangdu			wlcy[i]=(10.27)*(1/(4*((1-wlcx[i]/lunkuochangdu)^2))+wlcx[i]/lunkuochangdu-1/4)		endfor		string wlcnamex="wlcc"+num2str(lunkuochangdunm)+"x"		string wlcnamey="wlcc"+num2str(lunkuochangdunm)+"y"		make/o/n=120 $wlcnamex,$wlcnamey		duplicate/o wlcx,$wlcnamex		duplicate/o wlcy,$wlcnamey		appendtograph $wlcnamey vs $wlcnamex		doupdate		ModifyGraph rgb($wlcnamey )=(65280,0,0) 		ModifyGraph lsize($wlcnamey )=2	endfor	for (k=0;k<jred;k+=1)			lunkuochangdunm=targetred[k]		lunkuochangdu=targetred[k]*0.36		for (i=0;i<=114;i+=1)			wlcx[i]=(i/128)*lunkuochangdu			wlcy[i]=(10.27)*(1/(4*((1-wlcx[i]/lunkuochangdu)^2))+wlcx[i]/lunkuochangdu-1/4)		endfor		wlcnamex="wlcc"+num2str(lunkuochangdunm)+"x"		wlcnamey="wlcc"+num2str(lunkuochangdunm)+"y"		make/o $wlcnamex,$wlcnamey		duplicate/o wlcx,$wlcnamex		duplicate/o wlcy,$wlcnamey		appendtograph $wlcnamey vs $wlcnamex		ModifyGraph rgb($wlcnamey )=(65280,0,0) 	endforendfunction remove_WLC()//This one Remove WLCs	wave target,targetred	variable k,lunkuochangdu,lunkuochangdunm	variable j=numpnts(target),jred=numpnts(targetred)	string removetarget	for (k=0;k<j;k+=1)			lunkuochangdunm=target[k]		removetarget="wlcc"+num2str(lunkuochangdunm)+"y"		removefromgraph $removetarget	endfor	for (k=0;k<jred;k+=1)			lunkuochangdunm=targetred[k]		removetarget="wlcc"+num2str(lunkuochangdunm)+"y"		removefromgraph $removetarget	endfor	removefromgraph lineEndMacro GET_OFFSET()silent 1string list1, help, tracename1, tempname, name, traces, subs,  xnamevariable nrofwaves, letters, l, j, index,k,f,lengthofstring, v1, xoff, yoff,lengthtn, numpoints1, numpoints2	removefromgraph/z mapwave	killwaves/z mapwave, xmapwave	make/n=1 mapwave, xmapwave	 list1 = tracenamelist("",";",1)       letters = strlen(list1)	do			help = list1[l]			if(cmpstr(help, ";") ==0)				nrofwaves = nrofwaves+1			endif			l = l+1	while (l<=letters)	do		tracename1 = StringFromList(index, list1)		if(strsearch(traceName1,"'",0)>=0)			lengthtn = strlen(traceName1)			j = 0			name =""			do				name[j] = traceName1[j+1]				j = j + 1			while(j < lengthtn-2)		else				name = tracename1		endif		xname = XWaveName("",name)		getwaveoffset($name)		$name+=gyoff		$xname+=gxoff			numPoints1 = numpnts(mapwave)			numPoints2 = numpnts($name)			redimension/n=(numpoints1+numpoints2) mapwave			redimension/n=(numpoints1+numpoints2) xmapwave			mapwave[numpoints1, ] = $name[p-numpoints1]			xmapwave[numpoints1, ] = $xname[p-numpoints1]		index = index + 1	while (index<nrofwaves)	ModifyGraph offset={0,0}End#pragma rtGlobals=1		// Use modern global access method.//How to make force curve density maps://1. Make your superimposition//2. Remove all wlc-curves, fitfs, fitF, lines etc. etc. from the graph//3. Run prepare_for_map//4. Run make_map//Macro prepare_for_map()//silent 1//string list1, help, tracename1, tempname, name, traces, subs,  xname//variable nrofwaves, letters, l, j, index,k,f,lengthofstring, v1, xoff, yoff,lengthtn, numpoints1, numpoints2////	//make mapwaves//	removefromgraph/z mapwave//	killwaves/z mapwave, xmapwave//	make/n=1 mapwave, xmapwave////	//get names of all waves on top graph//	 list1 = tracenamelist("",";",1)////	//calculate the number of waves//	letters = strlen(list1)//		do//			help = list1[l]//			if(cmpstr(help, ";") ==0)//				nrofwaves = nrofwaves+1//			endif//			l = l+1//		while (l<=letters)////	//for each wave...   //	do//		//get wavename out of the list to a single string//		tracename1 = StringFromList(index, list1)//	//		//remove ' at the beginning and the end of some wavenames//		if(strsearch(traceName1,"'",0)>=0)//			lengthtn = strlen(traceName1)//			j = 0//			name =""//			do//				name[j] = traceName1[j+1]//				j = j + 1//			while(j < lengthtn-2)//		else//				name = tracename1//		endif////		//get x-wavename that belongs to y-wave//		xname = XWaveName("",name)//	//		//		getwaveoffset($name)////		//add offsets to all waves	//		$name+=gyoff//		$xname+=gxoff//	//		//add the wave to the mapwave (do not add values, extend by points!!)//		//			//redim//			numPoints1 = numpnts(mapwave)//			numPoints2 = numpnts($name)//			//			redimension/n=(numpoints1+numpoints2) mapwave//			redimension/n=(numpoints1+numpoints2) xmapwave//			//			mapwave[numpoints1, ] = $name[p-numpoints1]//			xmapwave[numpoints1, ] = $xname[p-numpoints1]//			//		index = index + 1//	while (index<nrofwaves)//End//Macro make_map()//	map2()//End////Function map2()//	variable i, dx, dy, tx, ty, numpoints, rx, ry, spacer, dimx, dimy, negx, negy, zeroit//	string mapwave="mapwave", xmapwave="xmapwave", allmapwave="map"//	variable/g nrofwaves=nrofwaves////	///////////	//user defined variables//	//1. resolution//	dx=1  //how many nm per unit?//	dy=1 //how many pN per unit?//	//	//2. treshholds//	rx=400 //max nm//	ry=400 //max pN//	negx=5  //lowest nm to consider//	negy=40 //lowest pN to consider//	//	spacer=10000//	///////////	//	dimx=rx/dx  //no of units//	dimy=ry/dy  //no of units//	killwaves/z map//	Make/O/N=(dimx,dimy) map//	//	numpoints = numpnts(mapwave)//	wave ymap=$mapwave, xmap=$xmapwave, allmap=$allmapwave//	//	ymap += spacer//	xmap += spacer//	//	killwaves/z xaxis, yaxis//	Make/N=(dimx+1) xaxis//	Make/N=(dimy+1) yaxis//	//	xaxis = dx*x-negx//	yaxis = dy*x-negy//		//	do//		//cell nos//		tx = ceil(xmap[i]/dx)-((spacer-negx)/dx)//		ty = ceil(ymap[i]/dy)-((spacer-negy)/dy)//		//		map[tx][ty] += 1//		i = i+1//	while(i<=numpoints)////Display/w=(0,0,768,553);//AppendImage map vs {xaxis,yaxis}//ModifyImage map ctab= {*,30,Grays,1}//ColorScale/C/N=text0  ctab={0,30,Grays,1}////wavestats/q map//	ymap -= spacer//	xmap -= spacer//	/////////////////////////////////////////////////////////////  BetP /////////////////////////	//	ColorScale/C/N=text0 fsize=30;DelayUpdate//	ColorScale/C/N=text0/X=85.00/Y=3.00//	ModifyGraph fSize(left)=30//	TextBox/C/N=text1/X=2.00/Y=40.00//	ModifyGraph fSize=30,mirror=0//	Label left "Force (pN)"//	Label bottom "Contour Length (nm)"//	string tbox="\\Z30LcG\r\\Z30LacY\r\\Z30500 nm/s\r"+"\\Z30n="+num2str(nrofwaves)//	TextBox/C/N=text1/A=LC/X=2.00/Y=35.00 tbox//	SetAxis bottom 0,170 //	Label left "\\Z36Force (pN)"//	Label bottom "\\Z36Distance (nm)"//	ColorScale/C/N=text0/F=0/X=85.00/Y=12.00 ctab={0,50,Grays,1}//	TextBox/C/N=text1/F=0//	ModifyImage map ctab= {*,50,Grays,1}///////////////////////////////////////////////////////////////  BetP /////////////////////////	////	//end//////Macro crop_map()//variable dx, dy, rx, ry, negx, negy, dimx, dimy//	//1. resolution//	dx=1  //how many nm per unit?//	dy=1  //now many pN per unit?//	//	//2. treshholds//	rx=200 //max nm//	ry=400 //max pN//	negx=5  //lowest nm to consider//	negy=40 //lowest pN to consider//	//	dimx=(rx+negx+2)/dx  //no of units//	dimy=(ry+negy+1)/dy  //no of units//	//	killwaves/z  small_map//	//	killwaves/z small_xaxis,  small_yaxis//	Make/N=(dimx)  small_xaxis//	Make/N=(dimy-1)  small_yaxis//	//	small_xaxis = dx*x-negx//	small_yaxis = dy*x-negy+1//	 //	Duplicate/R=[0,rx+negx][1,ry+negy] map small_map    //Duplicate/R=[startRow,endRow][startCol,endCol]//	//	Display;AppendImage  small_map vs {small_xaxis, small_yaxis}//	ModifyImage  small_map ctab= {*,10,Grays,1}//	wavestats/q map////ColorScale/C/N=text0 image=map;DelayUpdate////ColorScale/C/N=text0 "Count"////ColorScale/C/N=text0 heightPct=60////ColorScale/C/N=text0/X=80.00/Y=17.00//Label left "Force [pN]"//Label bottom "Distance [nm]"//ModifyGraph axOffset=0//end//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////function prepare_for_map2()	string list1, tracename1, name, traces, xname	variable j, index, lengthtn, numpoints1, numpoints2	variable/g nrofwaves	//make mapwaves	removefromgraph/z mapwave	make/o/n=1 mapwave, xmapwave	//get names of all waves on top graph	list1 = tracenamelist("",";",1)	//calculate the number of waves	nrofwaves=itemsInList(list1)	//for each wave...   	do		//get wavename out of the list to a single string		tracename1 = StringFromList(index, list1)			//remove ' at the beginning and the end of some wavenames		if(strsearch(traceName1,"'",0)>=0)			lengthtn = strlen(traceName1)			j = 0			name =""			do				name[j] = traceName1[j+1]				j = j + 1			while(j < lengthtn-2)		else			name = tracename1		endif		//get x-wavename that belongs to y-wave		xname = XWaveName("",name)			variable/c offsets=getwaveoffset2($name)		//add offsets to all waves			wave wavey=$name		wave wavex=$xname		wavey+=imag(offsets)		wavex+=real(offsets)			//add the wave to the mapwave (do not add values, extend by points!!)				//redim		numPoints1 = numpnts(mapwave)		numPoints2 = numpnts(wavey)		redimension/n=(numpoints1+numpoints2) mapwave		redimension/n=(numpoints1+numpoints2) xmapwave					mapwave[numpoints1, ] = wavey[p-numpoints1]		xmapwave[numpoints1, ] = wavex[p-numpoints1]					index = index + 1	while (index<nrofwaves)End//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function/c getwaveoffset2(w)	wave w		String s=TraceInfo("",NameOfWave (w),0)		if( strlen(s) == 0 )		return NaN	endif		String subs= "offset(x)={"	Variable v1= StrSearch(s,subs,0)	if( v1 == -1 )		return NaN	endif	v1 += strlen(subs)			Variable xoff= str2num(s[v1,1e6])	v1= StrSearch(s,",",v1)	Variable yoff= str2num(s[v1+1,1e6])	return cmplx(xoff,yoff)end//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Function make_map2()	variable i, dx, dy, tx, ty, numpoints, rx, ry, dimx, dimy, negx, negy, zeroit,outside	nvar nrofwaves=nrofwaves	/////////	//user defined variables	//1. resolution	dx=0.5  //how many nm per unit?	dy=1 //how many pN per unit?		//2. treshholds	rx=500 //max nm	ry=500 //max pN	negx=-100  //lowest nm to consider	negy=-100 //lowest pN to consider		dimx=(rx-negx)/dx  //no of units	dimy=(ry-negy)/dy  //no of units	Make/O/N=(dimx,dimy) map=0		wave ymap=mapwave 	wave xmap=xmapwave		numpoints = numpnts(ymap)		Make/o/N=(dimx+1) xaxis	Make/o/N=(dimy+1) yaxis		xaxis = dx*x+negx	yaxis = dy*x+negy		i=0	do		if (((negx<xmap[i])&&(xmap[i]<rx))&&((negy<ymap[i])&&(ymap[i]<ry)))			tx = trunc((xmap[i]-negx)/dx)			ty = trunc((ymap[i]-negy)/dy)			map[tx][ty] += 1		else			outside+=1		endif		i = i+1	while(i<numpoints)	print num2str(outside)+" of "+num2str(numpoints)+" ouside mape"	Display/w=(0,0,768,553)/n=DensityPlot;	AppendImage map vs {xaxis,yaxis}	Label left "\\Z36Force (pN)"	Label bottom "\\Z36Distance (nm)" 	ModifyGraph fSize=30,mirror=0	ModifyGraph fSize(left)=30	variable max_val=ceil(wavemax(map))	ModifyImage map ctab= {*,max_val,Grays,1}	ColorScale/C/N=text0 fsize=30	ColorScale/C/N=text0/F=0/X=85.00/Y=12.00 ctab={0,max_val,Grays,1} 		string tbox="\\Z30LcG\rLacY\r? nm/s\rn="+num2str(nrofwaves)	TextBox/C/N=text1/A=LC/X=2.00/Y=35.00/F=0 tboxendMacro modifer()String tracename1, xtracename1, tracename3, tracename4, tracename5, list1, list2, list3, name, list4, list5, traces, subs, help,newtssname,newdefnameVariable index=0, k=0, v1=0, xoff=0, yoff=0, letters=0, nrofwaves = 0, l=0, lengthtn, jvariable/g changecoloursilent 1//read out all wavenames of all graphs//Deflection will be the lead has to be the actual window when this macro is run!!!list1 = Tracenamelist("",";",1)//calculate number of wavesletters = strlen(list1)do   help = list1[l]   if(cmpstr(help, ";") ==0)       nrofwaves = nrofwaves+1   endif   l = l+1while (l<=letters)print "number of waves=", nrofwavesdo   //get wavenames out of lists to strings   traceName1 = StringFromList(index, list1)        //remove ' at the beginning and the end of some wavenames       if(strsearch(traceName1,"'",0)>=0)           lengthtn = strlen(traceName1)           j = 0           name =""           do               name[j] = traceName1[j+1]               j = j + 1           while(j < lengthtn-1)       else               name = tracename1       endif   tracename1 = name   xtracename1 = xwavename("",tracename1)   //print "I am working on:", tracename1, "and", xtracename1//   $tracename1/=1.03   $tracename1/=1.2   //	wavestats $tracename1	//    $tracename1(0,(V_maxloc+5))/=0.9//  $xtracename1 +=0.005* $tracename1//	$xtracename1 /=(1+(0.21*abs((($xtracename1/0.36)-100)/354)))   //print index   index = index + 1while (index<nrofwaves)  Endfunction renameCurvesOnGraph()string newnameprompt newname, "new wave name prefix"doprompt "enter prefix here", newnamevariable letters, nrofwaves, lengthtn, j, index=0, lstring nameofwindow, list1, tracename1, xname, xname1, name, name1, helpnameofwindow=WinName(0,1)	list1 = tracenamelist("",";",1)   //get names of all waves on top graph	letters = strlen(list1)   //calculate the number of waves		do			help = list1[l]			if(cmpstr(help, ";") ==0)				nrofwaves = nrofwaves+1			endif			l = l+1		while (l<=letters)	print nrofwaves, "waves are going to be analyzed"		do  //for each wave...   		tracename1 = StringFromList(index, list1) //get wavename out of the list to a single string		if(strsearch(traceName1,"'",0)>=0)			lengthtn = strlen(traceName1)			j = 0			name =""			do				name[j] = traceName1[j+1]				j = j + 1			while(j < lengthtn-2)		else				name = tracename1		endif		xname = XWaveName("",name)		name1=newname+""+num2str(index+1)+"Defl"		xname1=newname+""+num2str(index+1)+"tss"				rename $name, $name1		rename $xname, $xname1						index+=1	while(index<nrofwaves)end// ###########################################// TRACES IN THE MARQUEE   TRACES IN THE MARQUEE// ############################################// note that the traces MUST HAVE point on the marquee#include <Graph Utility Procs>Macro remove_traces_on_marquee(graphname)String graphname	RemoveTracesInMarquee(graphname)End String theList = ""// Make a list of all traces that have points that fall within the marqueeFunction/S ListTracesInMarquee(graphname)	String graphname 	String tlist = TraceNameList(graphname, ";", 1)	Variable ntraces = ItemsInList(tlist) 	Make/O/D/N=4/FREE marqueeX, marqueeY 	GetMarquee/W=$graphname left, bottom	marqueeY = {V_top, V_top, V_bottom, V_bottom}	MarqueeX = {V_left, V_right, V_right, V_left} 	String theList = ""	Variable i	for (i = 0; i < ntraces; i += 1)		String onetrace = StringFromList(i, tlist)		Wave ywave = TraceNameToWaveRef(graphname, onetrace)		Wave/Z xwave = XWaveRefFromTrace(graphname, onetrace)		if (!WaveExists(xwave))			Duplicate/O/FREE ywave, xwave			xwave = pnt2x(ywave, p)		endif		String offsetinfo = WMGetRECREATIONInfoByKey("offset(x)", traceinfo(graphname, onetrace, 0))		offsetinfo = offsetinfo[1, strlen(offsetinfo)-2]		Variable xoffset = str2num(stringfromlist(0, offsetinfo, ","))		Variable yoffset = str2num(stringfromlist(1, offsetinfo, ","))		marqueeY -= yoffset		marqueeX -= xoffset		FindPointsInPoly xwave, ywave, marqueeX, marqueeY		marqueeY += yoffset		marqueeX += xoffset		Wave W_inPoly		if (sum(W_inPoly) > 0)			theList += onetrace+";"					endif			endfor 	 print thelist	return theListend// Remove traces on the marquee //Function RemoveTracesInMarquee(graphname)	String graphname	Variable red, green, blue 	String tlist = ListTracesInMarquee(graphname)	Variable ntraces = ItemsInList(tlist) 	Variable i	for (i = 0; i < ntraces; i += 1)		String onetrace = StringFromList(i, tlist)				RemoveFromGraph/W=$graphname $onetrace			endforend